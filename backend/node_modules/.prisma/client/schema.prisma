// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  clients Client[]
  orders  Order[]
  budgets Budget[]

  @@map("users")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]
  budgets Budget[]

  @@map("clients")
}

enum OrderStatus {
  PENDING
  IN_PRODUCTION
  COMPLETED
  CANCELED
}

model Order {
  id        String      @id @default(uuid())
  product   String
  quantity  Int
  deadline  DateTime?
  status    OrderStatus @default(PENDING)
  clientId  String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relacionamentos
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Budget {
  id          String   @id @default(uuid())
  description String
  value       Decimal  @db.Decimal(10, 2)
  date        DateTime
  clientId    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}
